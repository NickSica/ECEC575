##########################################################################################
# Tool: IC Compiler II
# Script: Makefile_pnr
# Version: U-2022.12
# Copyright (C) 2014-2022 Synopsys, Inc. All rights reserved.
##########################################################################################

ICC2_EXEC = icc2_shell
FM_EXEC = fm_shell
VC_LP_EXEC = vc_static_shell
OPTIONS =

## LOGS_DIR value comes from rm_setup/design_setup.tcl; default is logs_icc2
LOGS_DIR := $(subst $\",,$(shell expand rm_setup/design_setup.tcl | grep "^set LOGS_DIR" | awk '{print $$3}'))

## STAGE and REPORT_PARALLEL_SUBMIT_COMMAND values are used by rm_summary target 
STAGE := $(filter-out rm_summary,$(MAKECMDGOALS))
REPORT_PARALLEL_SUBMIT_COMMAND := $(subst $\",,$(shell expand rm_setup/design_setup.tcl | grep "^set REPORT_PARALLEL_SUBMIT_COMMAND" | awk '{print $$3}'))

## Optional: Specify design library if you want backup step and clean step to use it
## CAUTION: if added, the clean step will delete it
DESIGN_LIB =

console:
	$(ICC2_EXEC)

setup:
	test -d $(LOGS_DIR)	|| mkdir $(LOGS_DIR)
	date > setup

create_fusion_reference_library: setup
	$(ICC2_EXEC) $(OPTIONS) -f ./rm_icc2_pnr_scripts/create_fusion_reference_library.tcl | tee -i $(LOGS_DIR)/create_fusion_reference_library.log

init_design: setup
	$(ICC2_EXEC) $(OPTIONS) -f ./rm_icc2_pnr_scripts/init_design.tcl | tee -i $(LOGS_DIR)/init_design.log
	test -f ./init_design || { echo "RM-error : init_design touch file was not found. Pls check init_design.log for RM-error message. Exiting ..."; exit 1; }

place_opt: setup init_design
	$(ICC2_EXEC) $(OPTIONS) -f ./rm_icc2_pnr_scripts/place_opt.tcl | tee -i $(LOGS_DIR)/place_opt.log

clock_opt_cts: setup place_opt
	$(ICC2_EXEC) $(OPTIONS) -f ./rm_icc2_pnr_scripts/clock_opt_cts.tcl | tee -i $(LOGS_DIR)/clock_opt_cts.log

clock_opt_opto: setup clock_opt_cts
	$(ICC2_EXEC) $(OPTIONS) -f ./rm_icc2_pnr_scripts/clock_opt_opto.tcl | tee -i $(LOGS_DIR)/clock_opt_opto.log

route_auto: setup clock_opt_opto
	$(ICC2_EXEC) $(OPTIONS) -f ./rm_icc2_pnr_scripts/route_auto.tcl | tee -i $(LOGS_DIR)/route_auto.log

route_opt: setup route_auto
	$(ICC2_EXEC) $(OPTIONS) -f ./rm_icc2_pnr_scripts/route_opt.tcl | tee -i $(LOGS_DIR)/route_opt.log

chip_finish: setup route_opt
	$(ICC2_EXEC) $(OPTIONS) -f ./rm_icc2_pnr_scripts/chip_finish.tcl | tee -i $(LOGS_DIR)/chip_finish.log

icv_in_design: setup chip_finish
	$(ICC2_EXEC) $(OPTIONS) -f ./rm_icc2_pnr_scripts/icv_in_design.tcl | tee -i $(LOGS_DIR)/icv_in_design.log

all: icv_in_design
	date > all

# Remember to also set WRITE_DATA_FROM_BLOCK_NAME to your desired step as input; default is icv_in_design
write_data: setup 
	$(ICC2_EXEC) $(OPTIONS) -f ./rm_icc2_pnr_scripts/write_data.tcl | tee -i $(LOGS_DIR)/write_data.log

## rm_summary target will run the rm_summary script that generates and refreshes a qor summary table 
## To use, submit the rm_summary target in parallel with the appropriate implementation Makefile target 
## make -j -f rm_setup/Makefile route_opt rm_summary
## Note: the rm_summary target should only be submitted in parallel with an implementation makefile target.
## Valid targets: init_design, compile or any substep of compile, clock_opt_cts, clock_opt_opto, route_auto, route_opt, endpoint_opt, timing_eco, icv_in_design, chip_finish 
ifeq ($(MAKECMDGOALS),rm_summary)
rm_summary:
	rm_utilities/rm_summary.py  > summary_rm.rpt
else ifneq ($(REPORT_PARALLEL_SUBMIT_COMMAND),)
rm_summary: 
	@until [ -f rpts_fc/$(STAGE)/report_done ] ; do \
                sleep 60 ; \
                rm_utilities/rm_summary.py  > summary_rm.rpt ; \
        done 
else
rm_summary: 
	@until [ -f $(STAGE) ] ; do \
                sleep 60 ; \
                rm_utilities/rm_summary.py  > summary_rm.rpt ; \
        done
endif

################################################################################################################
## Optional Steps for Flat P&R
################################################################################################################
# route_opt PBA-CCD targeted optimization
endpoint_opt: route_opt
	$(ICC2_EXEC) $(OPTIONS) -f ./rm_icc2_pnr_scripts/endpoint_opt.tcl | tee -i $(LOGS_DIR)/endpoint_opt.log

# Timing Closure ECO flow
# The timing closure ECO target supports both eco_opt and a user provided change file.  This is controlled via
# the PT_ECO_CHANGE_FILE variable in design_setup.tcl.  If filler cells or metal fill exists in the source design,
# they are automatically reinserted after the ECO.
timing_eco: setup
	$(ICC2_EXEC) $(OPTIONS) -f ./rm_icc2_pnr_scripts/timing_eco.tcl | tee -i $(LOGS_DIR)/timing_eco.log

# Functional ECO flow
# The functional ECO target supports both freeze_silicon and MPI.  If filler cells or metal fill exists in the 
# source design, they are automatically reinserted after the ECO.  It is recommended that functional ECOs are 
# followed by a timing closure ECO.
functional_eco: setup
	$(ICC2_EXEC) $(OPTIONS) -f ./rm_icc2_pnr_scripts/functional_eco.tcl | tee -i $(LOGS_DIR)/functional_eco.log

# Redhawk in-design analysis
# Specify the starting block using the REDHAWK_IN_DESIGN_PNR_FROM_BLOCK_NAME variable in design_setup.tcl
redhawk_in_design_pnr: setup
	$(ICC2_EXEC) $(OPTIONS) -f ./rm_icc2_pnr_scripts/redhawk_in_design_pnr.tcl | tee -i $(LOGS_DIR)/redhawk_in_design_pnr.log

# RedHawk-SC in-design analysis
# Specify the starting block using the REDHAWK_IN_DESIGN_PNR_FROM_BLOCK_NAME variable in design_setup.tcl
rhsc_in_design_pnr: setup
	$(ICC2_EXEC) $(OPTIONS) -f ./rm_icc2_pnr_scripts/rhsc_in_design_pnr.tcl | tee -i $(LOGS_DIR)/rhsc_in_design_pnr.log

# Formality
fm_icc2_synpnr.varfile : setup
	echo '' > fm_icc2_synpnr.varfile
	echo 'set UPF_MODE none' >> fm_icc2_synpnr.varfile
	echo 'set FM_LINK_LIBRARY $$LINK_LIBRARY' >> fm_icc2_synpnr.varfile
	echo 'set FM_REF_NDM_BLOCK init_design' >> fm_icc2_synpnr.varfile
	echo 'set FM_IMP_NDM_BLOCK write_data' >> fm_icc2_synpnr.varfile

fm_icc2_synpnr: fm_fc_synpnr.varfile
	export RM_VARFILE=fm_icc2_synpnr.varfile ; $(FM_EXEC) $(OPTIONS) -f ./rm_icc2_pnr_scripts/fm_r2g.tcl | tee -i $(LOGS_DIR)/fm_icc2_synpnr.log
	date > fm_icc2_synpnr


# Verification Compiler Low Power Static Signoff (VC LP)
vc_lp: setup write_data
	$(VC_LP_EXEC) -f ./rm_icc2_pnr_scripts/vc_lp.tcl | tee -i $(LOGS_DIR)/vc_lp.log

################################################################################################################
# Utilities
################################################################################################################
# Generates a summary report and csv file after any stage of the flow. 
# Running it multiple times will overwrite previous reports with the new report.
summary: setup
	$(ICC2_EXEC) $(OPTIONS) -f ./rm_icc2_pnr_scripts/summary.tcl | tee -i $(LOGS_DIR)/summary.log

##Backup
BACKUP  = BACKUP.`date "+%m_%d_%H_%M"`
backup:
	rm -rf $(BACKUP)
	mkdir -p $(BACKUP)
	cp -rf $(DESIGN_LIB) $(LOGS_DIR) $(BACKUP)

##Clean
clean:
	rm -f setup init_design place_opt clock_opt_cts clock_opt_opto route_auto route_opt chip_finish icv_in_design write_data all endpoint_opt timing_eco functional_eco redhawk_in_design_pnr rhsc_in_design_pnr fm vc_lp create_fusion_reference_library

clean_all: clean
	rm -rf $(LOGS_DIR) $(DESIGN_LIB)


## View a saved block in an interactive session
## view target start
## Required input : VIEW_BLOCK_NAME
## 1. Specify VIEW_BLOCK_NAME with a block name, either in the <design name>/<label> format, such as "RISC_CORE/init_design", or without using a label, such as "test1"
##    Note that RM's saved block format is always $DESIGN_NAME/<stage name>. So if the DESIGN_NAME is RISC_CORE and the stage is init_design, and you want to open the final saved block from this task,
##    you should specify RISC_CORE/init_design as the VIEW_BLOCK_NAME 
## 2. It's recommended to specify the value of VIEW_BLOCK_NAME when running make so there's no edit needed in the makefile. Here is the usage example: 
##    make -f rm_setup/Makefile view VIEW_BLOCK_NAME=RISC_CORE/init_design
##    where view is the makefile target, RISC_CORE/init_design is the name of the saved block which you want to open, 
##    and VIEW_BLOCK_NAME=RISC_CORE/init_design is the syntax to specify a value for VIEW_BLOCK_NAME when running make
## view target end
VIEW_BLOCK_NAME =
VIEW_TIMESTAMP = $(shell date +%m_%d_%H_%M_%S)

ifneq ($(VIEW_BLOCK_NAME),)
view: 
	rm -f view.varfile; echo > view.varfile
	echo 'set VIEW_BLOCK_NAME "${VIEW_BLOCK_NAME}"' >> view.varfile
	echo 'set VIEW_TIMESTAMP "${VIEW_TIMESTAMP}"' >> view.varfile
	export RM_VARFILE=view.varfile; $(ICC2_EXEC) $(OPTIONS) -f ./rm_icc2_pnr_scripts/view.tcl | tee -i $(LOGS_DIR)/view_${VIEW_TIMESTAMP}.log
else
view:
	@echo 'RM-error : VIEW_BLOCK_NAME is null. To use view, please specify a valid value for VIEW_BLOCK_NAME.'
	@echo 'RM-error : For example, make -f rm_setup/Makefile view VIEW_BLOCK_NAME=RISC_CORE/route_opt ,where view is the makefile target, RISC_CORE/route_opt is the name of the saved block which you want to open, and VIEW_BLOCK_NAME=RISC_CORE/route_opt is the syntax to specify a value for a makefile variable when running make'
endif
## view target end

